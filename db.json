{
    "processing_rule": [
        {
            "id": "processing_rule_Sender_criteria",
            "key": "Sender criteria",
            "value": "Criteria extracts the values of the sender attribute (the sender of the document) to determine the sending partner. Then webMethods.io B2B matches the sender partner from the document with the sender you specify in the processing rule. For example, if you specify the sender criteria in a processing rule, webMethods.io B2B uses the value extracted for the sender attribute to find the profile for the sending partner. Then, webMethods.io B2B matches that partner with the sender criteria in the processing rule. The possible values are:\nAny. Matches with any known or unknown sender.\nEnterprise. Matches only if the enterprise is the sender.\nUnknown. Matches only with unknown senders.\nSelected. Matches with a select group of senders."
        },
        {
            "id": "processing_rule_Receiver_criteria",
            "key": "Receiver criteria",
            "value": "Criteria extracts the values of the receiver attribute (the receiver of the document) to determine the receiver partner. Then webMethods.io B2B matches the receiver partner in the document with the receiver you specify in the processing rule. For example, if you specify the receiver criteria in a processing rule, webMethods.io B2B uses the value extracted for the receiver attribute to find the profile for the receiver partner. Then, webMethods.io B2B matches the partner with the receiver criteria in the processing rule. The possible values are:\nAny. Matches with any known or unknown receiver.\nEnterprise. Matches only if the enterprise is the receiver.\nUnknown. Matches only with unknown receivers.\nSelected. Matches with a select group of receivers."
        },
        {
            "id": "processing_rule_Document",
            "key": "Document",
            "value": "Criteria matches the type of business document that is used for the document you specify in the processing rule. For example, if you have an EDI UNEDIFACT D97B document of type ORDERS, you can the define document criteria to select a processing rule if the document matches with the ORDERS purchase order. The possible values are:\nAny. Matches with any type of document.\nUnknown. Matches with unknown type of document.\nSelected. Matches with a selected business document."
        },
        {
            "id": "processing_rule_User_status",
            "key": "User status",
            "value": "Criteria matches with the value of the user status in the document to the user status criteria specified in a processing rule. For example, you might set the user status attribute to PENDING in certain circumstances, and you can then define criteria to select a processing rule if the user status attribute is PENDING. The possible values are:\nAny. Matches with any type of user status.\nUser specified status. Matches with a user-specified status.\n\nType a value and click Add value to add a user status. You can add multiple user status values in a similar way."
        },
        {
            "id": "processing_rule_Recognition_error",
            "key": "Recognition error",
            "value": "Criteria matches with the value you specify for the recognition of errors in a processing rule. For example, you might set up processing rule criteria to select the processing rule only if webMethods.io B2B did not encounter errors. The possible values are:\nMay have errors. Matches even if document may have errors.\nHas no errors. Matches when a document has no errors.\nHas errors. Matches even when a document has errors."
        },
        {
            "id": "processing_rule_Attribute",
            "key": "Attribute",
            "value": "Select an attribute from the list."
        },
        {
            "id": "processing_rule_Data_type",
            "key": "Data type",
            "value": "Data type for the attribute is automatically selected."
        },
        {
            "id": "processing_rule_Operator",
            "key": "Operator",
            "value": "Indicate how to match the Value against the value extracted from the documents.\nFor example, you can match string values that contain specified characters using the operator Contains, match number values that are greater than a specified value using the operator Greater than, or match date values to a specified date using the operator Equals. The operator you specify depends on the data type of the attribute specified"
        },
        {
            "id": "processing_rule_Value",
            "key": "Value",
            "value": "Provide a value to match against the value extracted from the documents.\nIf you use the operators Blank or Not blank, you do not need to specify a value in this field.\nYou can specify the value types specific to the attribute selected as follows:\nString. Type the string. This match is case-sensitive.\nNumber. Type the number.\nDate and Time. Click  to select the date from the calendar or type the date and time using the format yyyy-mm-dd hh:mm:ss and a 24-hour clock for hh.\nNote: Ensure that the date and time stamp attributes in the incoming document payload is specified in UTC."
        },
        {
            "id": "processing_rule_Duplicate_check",
            "key": "Duplicate check",
            "value": "Checks if the shared document is a duplicate. The possible values you can set are:\nYes. Check if the document is a duplicate based on the following attributes:\nDocument ID only\nDocument ID and sender\nDocument ID, sender, and receiver\nDocument ID, sender, and document\nNo. Do not check for duplication.\nDefer to business document. Check the business document for mention of a preference for duplicate checks and perform the relevant action."
        },
        {
            "id": "processing_rule_Persist_document",
            "key": "Persist document",
            "value": "Saves a copy of the document in webMethods.io B2B. Save a copy based on one of the following options:\nYes\nOnly unique documents. Save only unique documents to webMethods.io B2B.\nAll documents. Save all documents.\nThe parts of the documents you can save are:\nContent. Save only the content part of the document.\nAttributes. Save only the document attributes.\nNote: If you reprocess a document without saving document attributes, you might get unexpected results. Because if the attributes are not saved, the document would not match the intended processing rule. Instead, the document would match another processing rule, such as the Default rule, and webMethods.io B2B would perform the processing actions defined in that rule.\nActivity log. Save only the activity logs of the document."
        },
        {
            "id": "processing_rule_Call_an_integration",
            "key": "Call an integration",
            "value": "Call a FlowService that is designed using webMethods.io Integration or use any other integration software to invoke the service endpoint with basic authentication. **webMethods.io Integration** is selected by default.\n**webMethods.io Integration**\n\nProvide the following details:\n\nProject. Select a project where the FlowService resides.\nFlowService. Select the FlowService you want to run.\nNote: Ensure that the FlowService is enabled to be invoked over HTTP in webMethods.io Integration.\nUsername. Select the username to access the FlowService.\nEnsure that the user you select has the required roles and permissions to execute this project.\nThe filter allows you to select the fFlowService created or modified by any developer. The filter works based on the first name or last name of the developer. You can obtain this information from the Administration page under the My cloud App.\nExecution mode. webMethods.io B2B can invoke the FlowService in one of the following ways:\nAsynchronous. webMethods.io B2B continues with the remaining processing actions immediately. If there are no subsequent processing actions, webMethods.io B2B returns to the caller that sent the document for processing. You can track the result of this type of FlowService on the Monitoring page webMethods.io Integration.\nSynchronous. Before performing the rest of the processing actions, webMethods.io B2B waits for the FlowService to complete before returning to the caller that sent the document for processing. You can track the result of this type of flow service in the Course of transaction section.\nReliable. (Default) Allows webMethods.io B2B to automatically retry running the failed FlowService by creating a task to track the completion. When webMethods.io B2B attempts to execute a FlowService and if the FlowService fails, webMethods.io B2B retries running the FlowService subsequently until it succeeds or until it reaches the maximum retry limit. If the FlowService execution reaches the maximum retry limit without succeeding, webMethods.io B2B marks the FlowService execution task as failed .\n**External Call**\n\nProvide the following details:\n\nURL. Specify the URL with which you want to invoke a service endpoint.\nUsername. Type the user name to connect to the server on which the service endpoint resides.\nPassword. Type the password to connect to the server hosting the service endpoint.\nExecution mode. webMethods.io B2B can invoke the service in one of the following ways:\nAsynchronous\nSynchronous\nReliable (default)\n\nIf you have a valid webMethods Cloud Container subscription, see Working with webMethods Cloud Container to configure the processing rule to run services on webMethods Cloud Container. For detailed information on the signature to use for calling a FlowService in webMethods.io Integration, see Service Signature for Calling a FlowService in webMethods.io Integration.\n\nSee webMethods.io B2B Connectors for a tutorial on the various connectors you can invoke on webMethods.io Integration."
        },
        {
            "id": "processing_rule_Send_an_email_alert",
            "key": "Send an email alert",
            "value": "Send an email alert to the intended recipients.\n\nProvide the following details:\n\nEmail to. Specify the recipient of the email.\n\nSelect one of the following values for the email recipient:\n\nEnterprise. Send an email alert to the enterprise.\nSender. Send an email alert to the sending partner.\nReceiver. Send an email alert to the receiving partner.\nSpecific email addresses. Send an email to a specific email addresses. A maximum of 128 email addresses can be added. The maximum character limit for an email address is 256 characters.\nContact type. Specify the type of contact. It can either be technical or administrative. This option does not appear if you add multiple email addresses. Ensure that you have already defined the contact type in the enterprise profile or the partner profile.\nSubject. Type the email subject. The maximum character limit is 256 characters.\nMail body. Type the email content. The maximum character limit is 4096 characters.\n\nIf you want to make the body of the email message dynamic, you can include information from the pipeline in the mail body using output template tags. The pipeline contains variables that can be used to dynamically populate the values. In addition, if the processing rule invokes a service endpoint that executes synchronously, the pipeline would also contain any information that the service places in the pipeline. For example, you might want the message to specify the type of document that was received and the sender of the document. Or you might want to include a hyperlink that allows the recipient of the email message to view the document.\n\nFor information on the pipeline variables see Using pipeline variables and for the template tag to use while drafting the email, see Template Tag and Description.\nNote: The email body supports only plain-text and the % character is reserved for the template tags. The % character therefore is not allowed in the mail body.\nThe Activity Log captures the email alert that is sent as part of this action."
        },
        {
            "id": "processing_rule_Change_user_Status",
            "key": "Change user Status",
            "value": "Specify the user status you want to see in the transaction when the processing rule corresponding to the business document is triggered. The allowed character limit is 255."
        },
        {
            "id": "processing_rule_Deliver_document",
            "key": "Deliver document",
            "value": "webMethods.io B2B checks the receiver's profile and uses the delivery method that is identified in the profile as the preferred outbound channel."
        },
        {
            "id": "processing_rule_EDIINT_Send_Message_Using_Channel",
            "key": "EDIINT Send Message Using Channel",
            "value": "Sends a synchronous EDIINT message using the outbound channel configured for a partner."
        },
        {
            "id": "processing_rule_EDIINT_Send_MDN_Message_Using_Channel",
            "key": "EDIINT Send MDN Message Using Channel",
            "value": "Sends an asynchronous MDN message using the outbound channel configured for a partner."
        },
        {
            "id": "processing_rule_Deliver_Functional_Acknowledgement",
            "key": "Deliver Functional Acknowledgement",
            "value": "Delivers a functional acknowledgement using the outbound channel configured for a partner."
        },
        {
            "id": "processing_rule_EDIINT_Process_Message",
            "key": "EDIINT Process Message",
            "value": "Persists EDIINT messages received from a partner.\nwebMethods.io B2B creates several transaction documents for an inbound EDIINT document with the payload type EDI by splitting the payload, group, and interchange of the message."
        },
        {
            "id": "processing_rule_EDIINT_Process_MDN_Message",
            "key": "EDIINT Process MDN Message",
            "value": "Processes and persists EDIINT MDN messages received from a partner."
        },
        {
            "id": "processing_rule_Profile_Validation_Standard_Fields",
            "key": "Profile Validation Standard Fields",
            "value": "Ensures that all the required standard fields of a partner profile have no blank values."
        },
        {
            "id": "processing_rule_Profile_Validation_Profile",
            "key": "Profile Validation Profile",
            "value": "Validates a partner profile for standard fields. In addition to validating all the mandatory fields, it ensures that the partner profile has the corporation data, and the required identity type, and identity value. If a preferred outbound channel is selected, it validates all the mandatory values that are specified for the channel.\nNote: If a partner is exchanging an EDIINT AS2 document, the partner must have the EDIINT AS2 identity type in addition to the existing identity types, for the transaction to be processed successfully."
        },
        {
            "id": "processing_rule_Profile_Validation_Extended_Fields",
            "key": "Profile Validation Extended Fields",
            "value": "Validates the extended profile fields."
        },
        {
            "id": "processing_rule_Default_Rule",
            "key": "Default Rule",
            "value": "Matches an inbound document with any sender, any receiver, any document type, any document user status, and any recognition errors.\nThe pre-processing actions in the default processing rule indicate that webMethods.io B2B must use the settings mentioned in the inbound document. The default processing rule is not editable.\nTip: Software AG recommends that you keep the Default rule as the last rule on the Processing rules page when no search criterion is applied."
        },
        {
            "id": "processing_rule_error",
            "key": "error",
            "value": "Document Error is a composite object containing the fields:"
        },
        {
            "id": "processing_rule_ ",
            "key": " ",
            "value": "String Error code received from webMethods.io Integration."
        },
        {
            "id": "processing_rule_ ",
            "key": " ",
            "value": "String Error message associated with the error code in webMethods.io Integration."
        },
        {
            "id": "processing_rule_response",
            "key": "response",
            "value": "Document Response message is a composite object containing the fields:"
        },
        {
            "id": "processing_rule_ ",
            "key": " ",
            "value": "String Content of the document encoded in Base64."
        },
        {
            "id": "processing_rule_ ",
            "key": " ",
            "value": "String Type of content being sent."
        },
        {
            "id": "processing_rule_ ",
            "key": " ",
            "value": "String Type of encoding that was used to encode the content in the response message.\n\n\n\nIf the response does not contain the encoding method, webMethods.io B2B considers the content to be using base64 encoding in UTF-8 standard."
        },
        {
            "id": "processing_rule_$key",
            "key": "$key",
            "value": "Inserts the path of the runtime variable."
        },
        {
            "id": "processing_rule_null=’AnyString’",
            "key": "null=’AnyString’",
            "value": "Specifies the string that you want the server to insert when Variable is null. You specify the string in AnyString. For example, %value carrier null=’No Carrier Assigned’%."
        },
        {
            "id": "processing_rule_empty=’AnyString’",
            "key": "empty=’AnyString’",
            "value": "Specifies the string that you want the server to insert when Variable contains an empty string. You specify the string in AnyString. For example: %value description empty=’Description Not Found’%."
        },
        {
            "id": "processing_rule_index=IndexNum",
            "key": "index=IndexNum",
            "value": "Specifies the index of an element that you want to insert. You can use this option to extract an element from an array variable. Specify an integer that represents the element’s position in the array. (Arrays are zero based.) For example: %value backItems index=1%."
        },
        {
            "id": "processing_rule_encode(Code)",
            "key": "encode(Code)",
            "value": "Encodes the contents of Variable prior to inserting it, where Code specifies the encoding system you want the server to apply to the string."
        },
        {
            "id": "processing_rule_",
            "key": "",
            "value": "Code"
        },
        {
            "id": "processing_rule_",
            "key": "",
            "value": "XML"
        },
        {
            "id": "processing_rule_",
            "key": "",
            "value": "b64"
        },
        {
            "id": "processing_rule_",
            "key": "",
            "value": "URL"
        },
        {
            "id": "processing_rule_",
            "key": "",
            "value": "none"
        },
        {
            "id": "processing_rule_decode(Code)",
            "key": "decode(Code)",
            "value": "Decodes the contents of Variable prior to inserting it, where Code specifies the way in which variable is currently decoded."
        },
        {
            "id": "processing_rule_",
            "key": "",
            "value": "Code"
        },
        {
            "id": "processing_rule_",
            "key": "",
            "value": "b64"
        },
        {
            "id": "processing_rule_",
            "key": "",
            "value": "URL"
        },
        {
            "id": "processing_rule_+nl",
            "key": "+nl",
            "value": "Adds a new line character. For example:%value +nl /items/qty%\n%value +nl /arrivalDate%\nThe result of the tag is:10\n10/18/20"
        }
    ]
}
